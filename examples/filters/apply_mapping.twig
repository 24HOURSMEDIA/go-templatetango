Apply mapping examples

```
go run main.go parse:file examples/filters/apply_mapping.twig

```
{# map properties from one object to another #}
{% set source = {"foo": "foo_value", "bar": "bar_value"} %}
{% set mapping = {"attr1": "foo", "attr2": "bar", "attr3": "notexist"} %}
{% set obj = mapping|apply_mapping(source) %}
{{ obj.attr1 }}-{{ obj.attr2 }}-{{ obj.attr3 }}
{# prints: `foo_value-bar_value-` }
```

```
{# create an object from variables in the current scope, with a default if they do not exists #}
{% set default = "default_value" %}
{% set foo = "foo_value" %}
{% set bar = "bar_value" %}
{% set obj = {"attr1": "foo", "attr2": "bar", "attr3": "notexist"} | apply_mapping(nil, nil, default) %}
{{ obj.attr1 }}-{{ obj.attr2 }}-{{ obj.attr3 }}
{# prints: `foo_value-bar_value-default_value` #}
```

```
{# create an object from variables in the current scope with a suffix, useful to create arrays of objects #}
{# from environment variables like VARIABLE1=, VARIABLE2= #}

{% set HOST1 = "example.com" %}
{% set PORT1 = "443" %}
{% set HOST2 = "foobar.com" %}
{% set PORT2 = "80" %}
{% set mapping = {"host": "HOST", "port": "PORT"} %}
{% set obj1 = mapping|apply_mapping(nil, "1") %}
{% set obj2 = mapping|apply_mapping(nil, "2") %}
{{ obj1.host }}:{{ obj1.port }}
{{ obj2.host }}:{{ obj2.port }}
{# prints: #}
{# example.com:443 #}
{# foobar.com:80 #}
```

Done.

